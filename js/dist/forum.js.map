{"version":3,"file":"forum.js","mappings":";;;;;;;;;;;;;;;;;;AAAmC;AACW;AACU;AAExDA,wEAAoB,CAAC,0BAA0B,EAAE,YAAM;EACrDC,4DAAM,CAACC,mFAAkB,EAAE,MAAM,EAAE,UAAUI,IAAI,EAAE;IACjD,IAAMC,IAAI,GAAG,IAAI,CAACC,KAAK,CAACC,IAAI,CAACF,IAAI,EAAE;IAEnC,IAAI,CAACA,IAAI,IAAIP,uEAAmB,CAAC,qBAAqB,CAAC,KAAKO,IAAI,CAACK,EAAE,EAAE,EAAE;IAEvEN,IAAI,CAACO,QAAQ,CAACC,IAAI,CAChBC,CAAA;MAAKC,SAAS,EAAC;IAAiB,GAC9BD,CAAA;MAAKC,SAAS,EAAC;IAAO,GAAEhB,uEAAmB,CAAC,kBAAkB,CAAC,CAAO,CAClE,CACP;EACH,CAAC,CAAC;AACJ,CAAC,CAAC;;;;;;;;;;;AChBF;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D","sources":["webpack://@datlechin/flarum-chatgpt/./src/forum/index.tsx","webpack://@datlechin/flarum-chatgpt/external root \"flarum.core.compat['common/extend']\"","webpack://@datlechin/flarum-chatgpt/external root \"flarum.core.compat['forum/app']\"","webpack://@datlechin/flarum-chatgpt/external root \"flarum.core.compat['forum/components/PostUser']\"","webpack://@datlechin/flarum-chatgpt/webpack/bootstrap","webpack://@datlechin/flarum-chatgpt/webpack/runtime/compat get default export","webpack://@datlechin/flarum-chatgpt/webpack/runtime/define property getters","webpack://@datlechin/flarum-chatgpt/webpack/runtime/hasOwnProperty shorthand","webpack://@datlechin/flarum-chatgpt/webpack/runtime/make namespace object","webpack://@datlechin/flarum-chatgpt/./forum.ts"],"sourcesContent":["import app from 'flarum/forum/app';\nimport { extend } from 'flarum/common/extend';\nimport PostUser from 'flarum/forum/components/PostUser';\n\napp.initializers.add('datlechin/flarum-chatgpt', () => {\n  extend(PostUser.prototype, 'view', function (view) {\n    const user = this.attrs.post.user();\n\n    if (!user || app.forum.attribute('chatGptUserPromptId') !== user.id()) return;\n\n    view.children.push(\n      <div className=\"UserPromo-badge\">\n        <div className=\"badge\">{app.forum.attribute('chatGptBadgeText')}</div>\n      </div>\n    );\n  });\n});\n","module.exports = flarum.core.compat['common/extend'];","module.exports = flarum.core.compat['forum/app'];","module.exports = flarum.core.compat['forum/components/PostUser'];","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export * from './src/forum';\n"],"names":["app","extend","PostUser","initializers","add","prototype","view","user","attrs","post","forum","attribute","id","children","push","m","className"],"sourceRoot":""}